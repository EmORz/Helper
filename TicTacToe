import java.io.FileOutputStream;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;

public class TicTacToe {
    private char[][] board;
    private char currentPlayer;

    public TicTacToe(){
        board= new char[3][3];
        currentPlayer='O';

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j]='.';
            }
        }
    }
    public void play(){
        Scanner sc = new Scanner(System.in);
        boolean gameFinished = false;



        try {
            PrintStream printStream = new PrintStream(new FileOutputStream("history.txt",true));

            Date currentDate = Calendar.getInstance().getTime();

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

            String formattedDate = dateFormat.format(currentDate);
            String formattedTime = timeFormat.format(currentDate);

            printStream.println("Дата: " + formattedDate);
            printStream.println("Час: " + formattedTime);
            printStream.println("Допълнителна информация");

            while (!gameFinished){
                System.out.println(printBoard());

                printStream.print("\n"+printBoard());

                int row, col;
                do{
                    System.out.println("Играч "+currentPlayer+" въведете координати.");
                    row = sc.nextInt();
                    col = sc.nextInt();
                    printStream.print(currentPlayer+" въведе координати: "+row+"; "+col);


                }while (!isValidMovie(row, col));

                board[row][col]= currentPlayer;

                if (hasWon()) {
                    gameFinished=true;
                    System.out.println("Играч "+currentPlayer+" печели.");

                }else if (isBoardFull()) {
                    gameFinished=true;
                    System.out.println("Играта е с равен резултат!");
                }
                else {
                    currentPlayer = currentPlayer=='O'?'X':'O';
                }
            }
            System.out.println(printBoard());
            printStream.print(printBoard());

            printStream.close();


        }catch (Exception ex){
            System.out.println(ex.getMessage());
        }

    }

    private boolean isBoardFull() {

        for (int i = 0; i < 3 ; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == '.') {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean hasWon() {
        return checkCols()||checkRows()||checkDiagonals();
    }

    private boolean checkDiagonals(){
        if (board[0][0] == currentPlayer&&board[1][1]==currentPlayer&&board[2][2]==currentPlayer) {
            return true;
        }
        if (board[0][2] == currentPlayer&&board[1][1]==currentPlayer&&board[2][0]==currentPlayer) {
            return true;
        }
        return false;
    }

    private boolean checkRows(){

        for (int i = 0; i < 3; i++) {

            if (board[i][0] == currentPlayer&&board[i][1]==currentPlayer&&board[i][2]==currentPlayer) {
                return true;
            }
        }
        return false;
    }
    private boolean checkCols(){
        for (int i = 0; i < 3; i++) {
            if (board[0][i] == currentPlayer&&board[1][i]==currentPlayer&&board[2][i]==currentPlayer) {
                return true;
            }
        }
        return false;
    }

    private boolean isValidMovie(int row, int col) {
        return (col>=0&&col<3&&
                row>=0&&row<3&&
                board[row][col]=='.');
    }

    private String printBoard() {

        String str ="";
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                str+=board[i][j]+" ";
            }
            str+="\n";
        }
        return str;
    }


}
